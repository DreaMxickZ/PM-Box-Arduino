#include <WiFi.h>
#include <FirebaseESP32.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <DHT.h>
#include <SoftwareSerial.h>
#include <time.h>

#define WIFI_SSID ""
#define WIFI_PASSWORD ""

// üîπ Firebase Credentials
#define FIREBASE_HOST "" 
#define FIREBASE_AUTH ""

// üîπ Firebase Objects
FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;

// üîπ PMS3003 Serial
SoftwareSerial pmsSerial(32, 33);  // RX, TX

// üîπ DHT Sensor
#define DHTPIN 4
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

// üîπ MQ-3 Sensor
#define MQ3_PIN 34  // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ Analog

// üîπ OLED Display
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

// üîπ ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
float temperature, humidity, alcohol;
int pm25, pm10;
String currentDate, currentTime;

// üîπ ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡∏•‡∏≤
#define DISPLAY_INTERVAL 10000    // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ó‡∏∏‡∏Å 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (10,000 ms)
#define UPLOAD_INTERVAL 600000    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ Firebase ‡∏ó‡∏∏‡∏Å 10 ‡∏ô‡∏≤‡∏ó‡∏µ (600,000 ms)
unsigned long lastDisplayTime = 0;
unsigned long lastUploadTime = 0;
int uploadCounter = 0;

// üîπ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° WiFi
void connectWiFi() {
    WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
    Serial.print("Connecting to WiFi");
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    Serial.println("\nConnected!");
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
    Serial.printf("Signal strength (RSSI): %d dBm\n", WiFi.RSSI());
    
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£
    Serial.println("Waiting for stable connection...");
    delay(2000);  // ‡∏£‡∏≠‡∏≠‡∏µ‡∏Å 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß
}

// üîπ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ NTP (‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
void setupTime() {
    configTime(7 * 3600, 0, "pool.ntp.org", "time.nist.gov");
    Serial.print("Syncing time...");
    while (time(nullptr) < 100000) {  // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        Serial.print(".");
        delay(1000);
    }
    Serial.println(" Time synced!");
}

// üîπ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á Timestamp ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
void updateTimestamp() {
    time_t now = time(nullptr);
    struct tm timeinfo;
    localtime_r(&now, &timeinfo);

    char dateBuffer[11], timeBuffer[9];
    strftime(dateBuffer, sizeof(dateBuffer), "%Y-%m-%d", &timeinfo);
    strftime(timeBuffer, sizeof(timeBuffer), "%H-%M-%S", &timeinfo);

    currentDate = String(dateBuffer);
    currentTime = String(timeBuffer);

    Serial.printf("Current Date: %s, Time: %s\n", currentDate.c_str(), currentTime.c_str());
}

// üîπ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å PMS3003
void readPMS3003() {
    if (pmsSerial.available()) {
        uint8_t buffer[32];
        pmsSerial.readBytes(buffer, 32);

        pm25 = (buffer[4] << 8) | buffer[5];
        pm10 = (buffer[6] << 8) | buffer[7];

        Serial.printf("PM2.5: %d ¬µg/m¬≥, PM10: %d ¬µg/m¬≥\n", pm25, pm10);
    }
}

// üîπ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
void readSensors() {
    // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ DHT11
    temperature = dht.readTemperature();
    humidity = dht.readHumidity();

    // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ MQ-3
    alcohol = analogRead(MQ3_PIN) * (5.0 / 4095.0); // ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô‡πÅ‡∏≠‡∏•‡∏Å‡∏≠‡∏Æ‡∏≠‡∏•‡πå

    // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ PMS3003
    readPMS3003();
}

// üîπ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ö‡∏ô OLED
void displayData() {
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(WHITE);

    display.setCursor(0, 0);
    display.printf("Date: %s\nTime: %s\n", currentDate.c_str(), currentTime.c_str());
    display.printf("Temp: %.1f C\nHum: %.1f%%\n", temperature, humidity);
    display.printf("Alcohol: %.2f V\n", alcohol);
    display.printf("PM2.5: %d ¬µg/m¬≥\nPM10: %d ¬µg/m¬≥", pm25, pm10);

    display.display();
}

// üîπ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏∂‡πâ‡∏ô Firebase ‡∏û‡∏£‡πâ‡∏≠‡∏° retry logic
void sendToFirebase() {
    updateTimestamp();
    String path = "/sensor_data/" + currentDate + "/" + currentTime;
    
    FirebaseJson json;
    json.set("timestamp", currentDate + " " + currentTime);
    json.set("temperature", temperature);
    json.set("humidity", humidity);
    json.set("alcohol", alcohol);
    json.set("pm25", pm25);
    json.set("pm10", pm10);

    int retryCount = 0;
    int maxRetries = 3;
    int retryDelay = 1000; // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    
    while (retryCount < maxRetries) {
        if (Firebase.setJSON(fbdo, path.c_str(), json)) {
            Serial.println("‚úÖ Data sent to Firebase");
            return;
        } else {
            Serial.printf("‚ùå Firebase Error (%d/%d): %s\n", 
                        retryCount+1, maxRetries, fbdo.errorReason().c_str());
            retryCount++;
            if (retryCount < maxRetries) {
                Serial.printf("Retrying in %d ms...\n", retryDelay);
                delay(retryDelay);
                retryDelay *= 2; // Exponential backoff
            }
        }
    }
}

// üîπ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏ß‡∏±‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏° retry logic
void cleanOldData() {
    time_t now = time(nullptr) - (24 * 3600); // 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
    struct tm timeinfo;
    localtime_r(&now, &timeinfo);

    char oldDate[11];
    strftime(oldDate, sizeof(oldDate), "%Y-%m-%d", &timeinfo);
    String oldPath = "/sensor_data/" + String(oldDate);

    int retryCount = 0;
    int maxRetries = 3;
    int retryDelay = 1000;
    
    while (retryCount < maxRetries) {
        if (Firebase.deleteNode(fbdo, oldPath.c_str())) {
            Serial.printf("üóëÔ∏è Deleted old data: %s\n", oldPath.c_str());
            return;
        } else {
            Serial.printf("‚ö†Ô∏è Failed to delete old data (%d/%d): %s\n", 
                        retryCount+1, maxRetries, fbdo.errorReason().c_str());
            retryCount++;
            if (retryCount < maxRetries) {
                Serial.printf("Retrying delete in %d ms...\n", retryDelay);
                delay(retryDelay);
                retryDelay *= 2;
            }
        }
    }
}

// üîπ Setup
void setup() {
    Serial.begin(115200);
    pmsSerial.begin(9600);  // PMS3003
    dht.begin();

    if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
        Serial.println("‚ùå OLED initialization failed");
        while (true);
    }
    
    connectWiFi();
    setupTime();

    config.host = FIREBASE_HOST;
    config.signer.tokens.legacy_token = FIREBASE_AUTH;
    Firebase.begin(&config, &auth);
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ SSL ‡πÅ‡∏•‡∏∞ timeout
    Firebase.reconnectWiFi(true);
    fbdo.setResponseSize(4096);
    fbdo.setCert(nullptr);  // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á SSL
    Firebase.setMaxRetry(fbdo, 3);
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
    updateTimestamp();
    readSensors();
    displayData();
    
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤
    lastDisplayTime = millis();
    lastUploadTime = millis();
}

// üîπ Loop
void loop() {
    unsigned long currentMillis = millis();
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WiFi
    if (WiFi.status() != WL_CONNECTED) {
        Serial.println("WiFi disconnected. Reconnecting...");
        connectWiFi();
    }
    
    // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ó‡∏∏‡∏Å 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    if (currentMillis - lastDisplayTime >= DISPLAY_INTERVAL) {
        Serial.println("Reading sensors and updating display...");
        updateTimestamp();
        readSensors();
        displayData();
        lastDisplayTime = currentMillis;
    }
    
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ Firebase ‡∏ó‡∏∏‡∏Å 10 ‡∏ô‡∏≤‡∏ó‡∏µ
    if (currentMillis - lastUploadTime >= UPLOAD_INTERVAL) {
        Serial.println("Uploading data to Firebase...");
        sendToFirebase();
        
        // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏∏‡∏Å 6 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î (‡∏ó‡∏∏‡∏Å 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
        uploadCounter++;
        if (uploadCounter % 6 == 0) {
            Serial.println("Cleaning old data...");
            cleanOldData();
        }
        
        lastUploadTime = currentMillis;
    }
    
    // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏õ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏¢‡∏≠‡∏∞
    delay(100);  // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ CPU ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
}